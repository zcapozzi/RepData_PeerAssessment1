cachemean(x)
cachemean(c(1:3))
x <- c(1:5)
x$get()
x$getmean()
4
a = 4
class(a)
class(x)
x
a
makeVector(a)
B = matrix(
+   c(2, 4, 3, 1, 5, 7, 5, 8, 10),
+   nrow=3,
+   ncol=3)
B = matrix(c(2, 4, 3, 1, 5, 7, 5, 8, 10), nrow=3, ncol=3)
B
solve(B)
solve(B) %*% B
cachemean(B)
cachemean(x)
cachemean(a)
cachemean(10)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(8)
x
a
mean(x)
y = 4
makeVector(8)
output = makeVector(8)
output ,_ makeVector(8)
output <- makeVector(8)
output
cachemean(output)
output <- makeVector(c(1:8))
cachemean(output)
h = cachemean(output)
first <- makeVector(c(1:9))
cachemean(first)
cachemean(first)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setinverse(m)
m
}
B
first_Matrix <- B
cacheSolve(first_Matrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
B = matrix(c(2, 4, 3, 1, 5, 7, 5, 8, 10), nrow=3, ncol=3)
first_M1 <- makeCacheMatrix(B)
cacheSolve(first_M1)
cacheSolve(first_M1)
cacheSolve(first_M1)
B = matrix(c(1, 4, 3, 1, 5, 7, 5, 8, 10), nrow=3, ncol=3)
first_M1 <- makeCacheMatrix(B)
cacheSolve(first_M1)
out1 <- cacheSolve(first_M1)
out1
out1 %*% B
## This function is going to achieve the goals of the assignment
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
B = matrix(c(1, 4, 3, 1, 5, 7, 5, 8, 12), nrow=3, ncol=3)
first_M1 <- makeCacheMatrix(B)
cacheSolve(first_M1)
out1 <- cacheSolve(first_M1)
out1
out1 %*% B
data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
names(data)
summary (data$VAL)
nrow(subset(data, data$VAL >= 24))
summary(data$FDS)
summary(data$FES)
file <- "C:\\Users\\zcapozzi002\\Documents\\Misc (Private)\\Hopkins Coursera\\Cleaning Data\\getdata-data-DATA.gov_NGAP.xlsx"
install.packages("xlsx")
folder <- "C:\\Users\\zcapozzi002\\Documents\\Misc (Private)\\Hopkins Coursera\\Cleaning Data"
filename <- "getdata-data-DATA.gov_NGAP.xlsx"
file <- system.file(folder, filename, package = "xlsx")
res <- read.xlsx(file, 1) # read first sheet
head(res)
library(xlsx)
folder <- "C:\\Users\\zcapozzi002\\Documents\\Misc (Private)\\Hopkins Coursera\\Cleaning Data"
filename <- "getdata-data-DATA.gov_NGAP.xlsx"
file <- system.file(folder, filename, package = "xlsx")
res <- read.xlsx(file, 1) # read first sheet
head(res)
res <- read.xlsx(file, 1) # read first sheet
file <- system.file(folder, filename, package = "xlsx")
res <- read.xlsx(file, 1) # read first sheet
res <- read.xlsx(filename, sheetIndex=1,header=TRUE) # read first sheet
folder <- "C:\\Users\\zcapozzi002\\Documents\\Misc (Private)\\Hopkins Coursera\\Cleaning Data\\"
filename <- paste(folder, "getdata-data-DATA.gov_NGAP.xlsx")
file <- system.file(folder, filename, package = "xlsx")
res <- read.xlsx(filename, sheetIndex=1,header=TRUE) # read first sheet
head(res)
filename <- paste(folder, "getdata-data-DATA.gov_NGAP.xlsx", sep="")
file <- system.file(folder, filename, package = "xlsx")
res <- read.xlsx(filename, sheetIndex=1,header=TRUE) # read first sheet
head(res)
dat = res[18:23,7:15]
dat
dat = res[17:22,7:15]
dat
dat = res[18:22,7:15]
dat
sum(dat$NA..5*dat$NA..10,na.rm=T)
81020*456
80120*456
library(XML)
install.packages("XML")
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
rootNode <- xmlRoot(doc)
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
install.packages("RCurl")
library(RCurl)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL)
doc <- xmlParse(xData)
str(doc)
head(doc)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
rootNode
names(rootNode)
rootNode[[1]]
rootNode[[1]][1]
rootNode[[1]][2]
xmlSApply(rootNode, mean)
rootNode[[1]][2]
rootNode[[1]][[2]]
rootNode[[1]][[2]][1]
rootNode[[1]][[2]][2]
subset(rootNode, rootNode[[1]][[2]][2]=="21231")
nrow(subset(rootNode, rootNode[[1]][[2]][2]=="21231"))
rootNode[[1]][[2]][2]
len(rootNode[[1]][[2]])
len(rootNode[[1]]
)
length(rootNode[[1]])
length(rootNode[[1]][[2]])
xmlSApply(rootNode, xmlValue)
rows = xmlSApply(rootNode, xmlValue)
nrow(rows)
length(rows)
rows = xmlSApply(rootNode, "//zipcode" xmlValue)
rows = xmlSApply(rootNode, "//zipcode", xmlValue)
rows
rows = xmlSApply(rootNode, "//zipcode", xmlValue)
rows = xpathSApply(rootNode, "//zipcode", xmlValue)
rows
nrow(rows=="2131")
length(rows=="2131")
class(rows)
nrow(subset(rows, rows=="21231"))
rows[0]
rows[1]
nrow(rows[rows=="21231"])
length(rows[rows=="21231"])
data <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
librar(data.table)
library(data.table)
data <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
install.packages("curl")
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
DT <- fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
names(DTD)
names(DT)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time({ mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) })
system.time({ mean(DT$pwgtp15,by=DT$SEX) })
system.time({ tapply(DT$pwgtp15,DT$SEX,mean) })
system.time({ sapply(split(DT$pwgtp15,DT$SEX),mean) })
system.time({ rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2] })
system.time({ DT[,mean(pwgtp15),by=SEX] })
DT[,mean(pwgtp15),by=SEX]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
tapply(DT$pwgtp15,DT$SEX,mean)
system.time({ tapply(DT$pwgtp15,DT$SEX,mean) })
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
system.time({ mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15) })
system.time({ mean(DT$pwgtp15,by=DT$SEX) })
system.time({ tapply(DT$pwgtp15,DT$SEX,mean) })
system.time({ sapply(split(DT$pwgtp15,DT$SEX),mean) })
system.time({ rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2] })
system.time({ DT[,mean(pwgtp15),by=SEX] })
summary(res)
summary(res$FES)
d <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
summary(d)
?rvest
install.packages("rvest")
library(rvest)
lines = html("http://biostat.jhsph.edu/~jleek/contact.html")
lines2 = html("http://biostat.jhsph.edu/~jleek/contact.html")
head(lines)
lines = read_html("http://biostat.jhsph.edu/~jleek/contact.html")
lines
lines = read_html("http://biostat.jhsph.edu/~jleek/contact.html")
lines
lines = read_html("http://biostat.jhsph.edu/~jleek/contact.html")
lines
lines = read_html("http://biostat.jhsph.edu/~jleek/contact.html")
lines
str(xyplot)
library(lattice)
library(lattice)
str(xyplot)
r = c(1:10)
s = c(1:20)
xyplot(r, s)
xyplot(r ~ s)
x = xyplot(r ~ s)
class(x)
library(nmle)
library(nlee)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
data(airquality)
install.packages("ggplot2")
library(ggplot2)
str(qplot)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
str(movies)
str(ggplot)
data(movies)
qplot(votes, rating, data = movies)
data(movies)
library(ggplot2)
data(movies)
?quinf
?qunif
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
X
mean(x, Prob)
mean(temp)
.1+.4+.9+.16
.1+.4+.9+1.6
plot(temp)
setwd("C:\\Users\\zcapozzi002\\Documents\\Misc (Private)\\Hopkins Coursera\\Reproducible Research\\RepData_PeerAssessment1")
# Loading and preprocessing the data
unzip("activity.zip")
raw_data <- read.csv("activity.csv")
data <- subset(raw_data, !is.na(raw_data$steps))
summary(data)
# What is mean total number of steps taken per day?
total_steps_per_day <- aggregate(raw_data$steps, by=list(raw_data$date), FUN=mean)
names(total_steps_per_day) = c('Date','TotalSteps')
nrow(total_steps_per_day)
total_steps_per_day <- total_steps_per_day[!is.na(total_steps_per_day$TotalSteps),]
total_steps_per_day$TotalSteps <- as.numeric(total_steps_per_day$TotalSteps)
nrow(total_steps_per_day)
hist(total_steps_per_day$TotalSteps)
mean_steps <- mean(total_steps_per_day$TotalSteps)
print(paste("Calculated mean steps per day: ",mean_steps))
median_steps <- median(total_steps_per_day$TotalSteps)
print(paste("Calculated median steps per day: ",median_steps))
# What is the average daily activity pattern?
steps_by_interval <- aggregate(data$steps, by=list(data$interval), FUN=mean)
names(steps_by_interval) = c('Interval', 'AvgSteps')
plot(steps_by_interval)
maxSteps <- steps_by_interval[steps_by_interval$AvgSteps == max(steps_by_interval$AvgSteps),]
print(paste("The interval which, on average, has the most steps daily: ", maxSteps$Interval))
# Imputing missing values
missing <- nrow(subset(raw_data, is.na(raw_data$steps)))
print(paste("There are", missing, "rows that have invalid or missing step counts."))
imputed_data <- merge(raw_data, steps_by_interval, by.x='interval', by.y='Interval')
imputed_data[is.na(imputed_data$steps), 'steps'] <- imputed_data[is.na(imputed_data$steps), 'AvgSteps']
new_missing <- nrow(subset(imputed_data, is.na(imputed_data$steps)))
print(paste("After imputation, there are", new_missing, "rows that have invalid or missing step counts."))
imputed_data <- subset(imputed_data, select=c('interval', 'steps', 'date'))
summary(imputed_data)
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
# Are there differences in activity patterns between weekdays and weekends?
hist(imputed_data$date ~ imputed_data$steps)
hist(imputed_data$steps)
nrow(imputed_data)
missing <- nrow(subset(raw_data, is.na(raw_data$steps)))
print(paste("There are", missing, "rows that have invalid or missing step counts."))
imputed_data <- merge(raw_data, steps_by_interval, by.x='interval', by.y='Interval')
imputed_data[is.na(imputed_data$steps), 'steps'] <- imputed_data[is.na(imputed_data$steps), 'AvgSteps']
new_missing <- nrow(subset(imputed_data, is.na(imputed_data$steps)))
print(paste("After imputation, there are", new_missing, "rows that have invalid or missing step counts."))
imputed_data <- subset(imputed_data, select=c('interval', 'steps', 'date'))
summary(imputed_data)
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
hist(imputed_data$steps)
nrow(raw_data)
summary(raw_data)
head(raw_data)
steps_per_day <- aggregate(imputed_data$steps, by=list(imputed_data$date), FUN=sum)
names(steps_per_day)
names(steps_per_day)<- c('date', 'steps')
hist(steps_per_day$steps)
print(paste("The median number of steps per day is", median(steps_per_day$steps)))
print(paste("The median number of steps per day is", round(median(steps_per_day$steps)), 0))
print(paste("The median number of steps per day is", round(median(steps_per_day$steps))))
(steps_per_day$steps))))
print(paste("The mean number of steps per day is", round(mean(steps_per_day$steps))))
print(paste("The median number of steps per day is", round(median(steps_per_day$steps))))
mean(steps_per_day$steps)
median(steps_per_day$steps)
print(paste("The mean number of steps per day is", round(mean(steps_per_day$steps))))
print(paste("The median number of steps per day is", round(median(steps_per_day$steps))))
mean_steps <- mean(total_steps_per_day$TotalSteps)
print(paste("Calculated mean steps per day: ",mean_steps))
median_steps <- median(total_steps_per_day$TotalSteps)
print(paste("Calculated median steps per day: ",median_steps))
imputed_data <- subset(imputed_data, select=c('interval', 'steps', 'date'))
summary(imputed_data)
# Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
imputed_steps_per_day <- aggregate(imputed_data$steps, by=list(imputed_data$date), FUN=sum)
names(imputed_steps_per_day)<- c('date', 'steps')
hist(imputed_steps_per_day$steps)
print(paste("The mean number of steps per day is", round(mean(imputed_steps_per_day$steps))))
print(paste("The median number of steps per day is", round(median(imputed_steps_per_day$steps))))
total_steps_per_day <- aggregate(raw_data$steps, by=list(raw_data$date), FUN=sum)
names(total_steps_per_day) = c('Date','TotalSteps')
nrow(total_steps_per_day)
total_steps_per_day <- total_steps_per_day[!is.na(total_steps_per_day$TotalSteps),]
total_steps_per_day$TotalSteps <- as.numeric(total_steps_per_day$TotalSteps)
nrow(total_steps_per_day)
hist(total_steps_per_day$TotalSteps)
mean_steps <- mean(total_steps_per_day$TotalSteps)
print(paste("Calculated mean steps per day: ",mean_steps))
median_steps <- median(total_steps_per_day$TotalSteps)
print(paste("Calculated median steps per day: ",median_steps))
print(paste("The original mean was",mean_steps,", the imputed mean was",mean(imputed_steps_per_day$steps)))
print(paste("The original median was",median_steps,", the imputed median was",median(imputed_steps_per_day$steps)))
head(imputed_data)
class(imputed_data$date)
head(as.date(imputed_data$date))
head(as.Date(imputed_data$date))
imputed_data$day_type <- weekdays(as.Date(imputed_data$date))
head(imputed_data)
imputed_data[imputed_data$day_type=='Sunday' | imputed_data$day_type=='Saturday','day_type'] <- 'weekend'
imputed_data[imputed_data$day_type!='weekend','day_type'] <- 'weekday'
head(imputed_data)
imputed_data$day_of_week <- weekdays(as.Date(imputed_data$date))
imputed_data[imputed_data$day_of_week=='Sunday' | imputed_data$day_of_week=='Saturday','day_type'] <- 'weekend'
imputed_data[imputed_data$day_type!='weekend','day_type'] <- 'weekday'
head(imputed_data)
class(imputed_data$day_type)
imputed_data$day_type <- as.factor(imputed_data$day_type)
class(imputed_data$day_type)
attach(mtcars)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
attach(mtcars)
par(mfrow=c(2,1))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
attach(mtcars)
par(mfrow=c(1,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
par(mfrow=c(1,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
plot(wt,mpg, main="Scatterplot of wt vs. mpg", type ="l")
imputed_data$day_of_week <- weekdays(as.Date(imputed_data$date))
imputed_data[imputed_data$day_of_week=='Sunday' | imputed_data$day_of_week=='Saturday','day_type'] <- 'weekend'
imputed_data[imputed_data$day_type!='weekend','day_type'] <- 'weekday'
imputed_data$day_type <- as.factor(imputed_data$day_type)
imputed_steps_by_interval <- aggregate(imputed_data$steps, by=list(imputed_data$interval), FUN=mean)
names(imputed_steps_by_interval) = c('Interval', 'AvgSteps')
plot(imputed_steps_by_interval$interval,imputed_steps_by_interval$AvgSteps, main="Steps by Interval", type ="l")
plot(imputed_steps_by_interval$Interval,imputed_steps_by_interval$AvgSteps, main="Steps by Interval", type ="l")
imputed_steps_by_interval <- aggregate(imputed_data$steps, by=list(imputed_data$interval, imputed_data$day_type), FUN=mean)
names(imputed_steps_by_interval) = c('Interval', 'Day_Type', 'AvgSteps')
head(imputed_steps_by_interval)
plot(imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekday', 'Interval'],
imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekday', 'AvgSteps'],
main="Steps by Interval", type ="l")
plot(imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekday', 'Interval'],
imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekday', 'AvgSteps'],
main="Steps by Interval",xlab='Interval', ylab='Avg Steps', type ="l")
par(mfrow=c(1,2))
plot(imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekday', 'Interval'],
imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekday', 'AvgSteps'],
main="Weekday Steps by Interval",xlab='Interval', ylab='Avg Steps', type ="l")
plot(imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekend', 'Interval'],
imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekend', 'AvgSteps'],
main="Weekend Steps by Interval",xlab='Interval', ylab='Avg Steps', type ="l")
par(mfrow=c(2,1))
plot(imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekday', 'Interval'],
imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekday', 'AvgSteps'],
main="Weekday Steps by Interval",xlab='Interval', ylab='Avg Steps', type ="l")
plot(imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekend', 'Interval'],
imputed_steps_by_interval[imputed_steps_by_interval$Day_Type=='weekend', 'AvgSteps'],
main="Weekend Steps by Interval",xlab='Interval', ylab='Avg Steps', type ="l")
install.packages("knitr")
install.packages("markdown")
